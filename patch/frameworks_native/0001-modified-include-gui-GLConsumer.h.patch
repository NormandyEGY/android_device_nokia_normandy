From 58ec65b44639e1941cddbfd191d0484e5f1c738d Mon Sep 17 00:00:00 2001
From: Ahmed Hady <ahmedhady6@gmail.com>
Date: Tue, 14 Jul 2015 00:17:10 +0200
Subject: [PATCH] modified: include/gui/GLConsumer.h modified:
 libs/gui/Android.mk modified: services/surfaceflinger/Android.mk modified:
 services/surfaceflinger/Layer.cpp modified:
 services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp modified:
 services/surfaceflinger/SurfaceFlingerConsumer.cpp modified:
 services/surfaceflinger/SurfaceFlingerConsumer.h

Change-Id: I01cb51d1dfe5ad8b05d439d4841924fe6e39cca7
---
 include/gui/GLConsumer.h                           | 10 ++++--
 libs/gui/Android.mk                                |  4 +++
 services/surfaceflinger/Android.mk                 |  4 +++
 services/surfaceflinger/Layer.cpp                  |  8 ++++-
 .../RenderEngine/GLES11RenderEngine.cpp            | 10 ++++--
 services/surfaceflinger/SurfaceFlingerConsumer.cpp | 36 +++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlingerConsumer.h   | 10 +++++-
 7 files changed, 75 insertions(+), 7 deletions(-)

diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index e03de45..20d81c4 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -429,8 +429,14 @@ private:
     // glCopyTexSubImage to read from the texture.  This is a hack to work
     // around a GL driver limitation on the number of FBO attachments, which the
     // browser's tile cache exceeds.
-    const uint32_t mTexTarget;
-
+#ifdef DECIDE_TEXTURE_TARGET
+protected:
+    uint32_t mTexTarget;
+private:
+#else
+     const uint32_t mTexTarget;
+#endif
+ 
     // EGLSlot contains the information and object references that
     // GLConsumer maintains about a BufferQueue buffer slot.
     struct EglSlot {
diff --git a/libs/gui/Android.mk b/libs/gui/Android.mk
index 9770da2..f810f0c 100644
--- a/libs/gui/Android.mk
+++ b/libs/gui/Android.mk
@@ -68,6 +68,10 @@ ifeq ($(TARGET_BOARD_PLATFORM), tegra3)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+	LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifeq ($(TARGET_SAMSUNG_GRALLOC_EXTERNAL_USECASES),true)
 	LOCAL_CFLAGS += -DSAMSUNG_GRALLOC_EXTERNAL_USECASES
 endif
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index f9a6852..69a6cd3 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -87,6 +87,10 @@ else
     LOCAL_CFLAGS += -DPRESENT_TIME_OFFSET_FROM_VSYNC_NS=0
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifneq ($(MAX_VIRTUAL_DISPLAY_DIMENSION),)
     LOCAL_CFLAGS += -DMAX_VIRTUAL_DISPLAY_DIMENSION=$(MAX_VIRTUAL_DISPLAY_DIMENSION)
 else
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 0d8b009..378ba56 100755
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -1419,8 +1419,14 @@ Region Layer::latchBuffer(bool& recomputeVisibleRegions)
         Reject r(mDrawingState, getCurrentState(), recomputeVisibleRegions,
                 getProducerStickyTransform() != 0);
 
+#ifdef DECIDE_TEXTURE_TARGET
         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
-                mFlinger->mPrimaryDispSync);
+                mFlinger->mPrimaryDispSync, &mTexture);
+#else
+         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
+                 mFlinger->mPrimaryDispSync);
+#endif
+
         if (updateResult == BufferQueue::PRESENT_LATER) {
             // Producer doesn't want buffer to be displayed yet.  Signal a
             // layer update so we check again at the next opportunity.
diff --git a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
index 22096ad..a40edce 100644
--- a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
+++ b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
@@ -208,8 +208,14 @@ void GLES11RenderEngine::setupLayerTexturing(const Texture& texture) {
     glMatrixMode(GL_TEXTURE);
     glLoadMatrixf(texture.getMatrix().asArray());
     glMatrixMode(GL_MODELVIEW);
-    glDisable(GL_TEXTURE_2D);
-    glEnable(GL_TEXTURE_EXTERNAL_OES);
+#ifdef DECIDE_TEXTURE_TARGET
+    glDisable((target == Texture::TEXTURE_2D) ?
+            GL_TEXTURE_EXTERNAL_OES : GL_TEXTURE_2D);
+    glEnable(target);
+#else
+     glDisable(GL_TEXTURE_2D);
+     glEnable(GL_TEXTURE_EXTERNAL_OES);
+#endif
 }
 
 void GLES11RenderEngine::setupLayerBlackedOut() {
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 7de6ac4..1014dcb 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -23,15 +23,27 @@
 
 #include <utils/Errors.h>
 #include <utils/NativeHandle.h>
+
+#ifdef DECIDE_TEXTURE_TARGET
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#endif
+
 #include <utils/Trace.h>
 
 namespace android {
 
 // ---------------------------------------------------------------------------
 
+#ifdef DECIDE_TEXTURE_TARGET
 status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
-        const DispSync& dispSync)
+        const DispSync& dispSync, Texture* mTexture)
 {
+#else
+ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
+         const DispSync& dispSync)
+ {
+#endif
     ATRACE_CALL();
     ALOGV("updateTexImage");
     Mutex::Autolock lock(mMutex);
@@ -75,6 +87,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.h b/services/surfaceflinger/SurfaceFlingerConsumer.h
index 28f2f6a..632ff82 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.h
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.h
@@ -20,6 +20,10 @@
 #include "DispSync.h"
 #include <gui/GLConsumer.h>
 
+#ifdef DECIDE_TEXTURE_TARGET
+#include "RenderEngine/Texture.h"
+#endif
+
 namespace android {
 // ----------------------------------------------------------------------------
 
@@ -53,7 +57,11 @@ public:
     // reject the newly acquired buffer.  Unlike the GLConsumer version,
     // this does not guarantee that the buffer has been bound to the GL
     // texture.
-    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#ifdef DECIDE_TEXTURE_TARGET
+    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync, Texture* mTexture = 0);
+#else
+     status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#endif
 
     // See GLConsumer::bindTextureImageLocked().
     status_t bindTextureImage();
-- 
2.1.4

